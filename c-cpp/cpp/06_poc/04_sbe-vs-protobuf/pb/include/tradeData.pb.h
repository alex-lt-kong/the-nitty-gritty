// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tradeData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tradeData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tradeData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tradeData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tradeData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tradeData_2eproto;
namespace pb {
class TradeData;
class TradeDataDefaultTypeInternal;
extern TradeDataDefaultTypeInternal _TradeData_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::TradeData* Arena::CreateMaybeMessage<::pb::TradeData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

enum TradeData_Currency : int {
  TradeData_Currency_USD = 0,
  TradeData_Currency_EUR = 1,
  TradeData_Currency_HKD = 2,
  TradeData_Currency_TradeData_Currency_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TradeData_Currency_TradeData_Currency_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TradeData_Currency_IsValid(int value);
constexpr TradeData_Currency TradeData_Currency_Currency_MIN = TradeData_Currency_USD;
constexpr TradeData_Currency TradeData_Currency_Currency_MAX = TradeData_Currency_HKD;
constexpr int TradeData_Currency_Currency_ARRAYSIZE = TradeData_Currency_Currency_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradeData_Currency_descriptor();
template<typename T>
inline const std::string& TradeData_Currency_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TradeData_Currency>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TradeData_Currency_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TradeData_Currency_descriptor(), enum_t_value);
}
inline bool TradeData_Currency_Parse(
    const std::string& name, TradeData_Currency* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TradeData_Currency>(
    TradeData_Currency_descriptor(), name, value);
}
// ===================================================================

class TradeData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.TradeData) */ {
 public:
  inline TradeData() : TradeData(nullptr) {};
  virtual ~TradeData();

  TradeData(const TradeData& from);
  TradeData(TradeData&& from) noexcept
    : TradeData() {
    *this = ::std::move(from);
  }

  inline TradeData& operator=(const TradeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeData& operator=(TradeData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeData* internal_default_instance() {
    return reinterpret_cast<const TradeData*>(
               &_TradeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TradeData& a, TradeData& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeData* New() const final {
    return CreateMaybeMessage<TradeData>(nullptr);
  }

  TradeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeData& from);
  void MergeFrom(const TradeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.TradeData";
  }
  protected:
  explicit TradeData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradeData_2eproto);
    return ::descriptor_table_tradeData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TradeData_Currency Currency;
  static constexpr Currency USD =
    TradeData_Currency_USD;
  static constexpr Currency EUR =
    TradeData_Currency_EUR;
  static constexpr Currency HKD =
    TradeData_Currency_HKD;
  static inline bool Currency_IsValid(int value) {
    return TradeData_Currency_IsValid(value);
  }
  static constexpr Currency Currency_MIN =
    TradeData_Currency_Currency_MIN;
  static constexpr Currency Currency_MAX =
    TradeData_Currency_Currency_MAX;
  static constexpr int Currency_ARRAYSIZE =
    TradeData_Currency_Currency_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Currency_descriptor() {
    return TradeData_Currency_descriptor();
  }
  template<typename T>
  static inline const std::string& Currency_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Currency>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Currency_Name.");
    return TradeData_Currency_Name(enum_t_value);
  }
  static inline bool Currency_Parse(const std::string& name,
      Currency* value) {
    return TradeData_Currency_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kPriceFieldNumber = 3,
    kCurrencyFieldNumber = 4,
    kQuantityFieldNumber = 5,
  };
  // string exchange = 1;
  void clear_exchange();
  const std::string& exchange() const;
  void set_exchange(const std::string& value);
  void set_exchange(std::string&& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  std::string* mutable_exchange();
  std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchange();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange(
      std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // string symbol = 2;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_symbol();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_symbol(
      std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // float price = 3;
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // .pb.TradeData.Currency currency = 4;
  void clear_currency();
  ::pb::TradeData_Currency currency() const;
  void set_currency(::pb::TradeData_Currency value);
  private:
  ::pb::TradeData_Currency _internal_currency() const;
  void _internal_set_currency(::pb::TradeData_Currency value);
  public:

  // int32 quantity = 5;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::int32 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.TradeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  float price_;
  int currency_;
  ::PROTOBUF_NAMESPACE_ID::int32 quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradeData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TradeData

// string exchange = 1;
inline void TradeData::clear_exchange() {
  exchange_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeData::exchange() const {
  // @@protoc_insertion_point(field_get:pb.TradeData.exchange)
  return _internal_exchange();
}
inline void TradeData::set_exchange(const std::string& value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:pb.TradeData.exchange)
}
inline std::string* TradeData::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:pb.TradeData.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& TradeData::_internal_exchange() const {
  return exchange_.Get();
}
inline void TradeData::_internal_set_exchange(const std::string& value) {
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeData::set_exchange(std::string&& value) {
  
  exchange_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.TradeData.exchange)
}
inline void TradeData::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.TradeData.exchange)
}
inline void TradeData::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.TradeData.exchange)
}
inline std::string* TradeData::_internal_mutable_exchange() {
  
  return exchange_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeData::release_exchange() {
  // @@protoc_insertion_point(field_release:pb.TradeData.exchange)
  return exchange_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeData::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.TradeData.exchange)
}
inline std::string* TradeData::unsafe_arena_release_exchange() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb.TradeData.exchange)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchange_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TradeData::unsafe_arena_set_allocated_exchange(
    std::string* exchange) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.TradeData.exchange)
}

// string symbol = 2;
inline void TradeData::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeData::symbol() const {
  // @@protoc_insertion_point(field_get:pb.TradeData.symbol)
  return _internal_symbol();
}
inline void TradeData::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:pb.TradeData.symbol)
}
inline std::string* TradeData::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:pb.TradeData.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& TradeData::_internal_symbol() const {
  return symbol_.Get();
}
inline void TradeData::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeData::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.TradeData.symbol)
}
inline void TradeData::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.TradeData.symbol)
}
inline void TradeData::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.TradeData.symbol)
}
inline std::string* TradeData::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeData::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.TradeData.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeData::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.TradeData.symbol)
}
inline std::string* TradeData::unsafe_arena_release_symbol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb.TradeData.symbol)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return symbol_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TradeData::unsafe_arena_set_allocated_symbol(
    std::string* symbol) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.TradeData.symbol)
}

// float price = 3;
inline void TradeData::clear_price() {
  price_ = 0;
}
inline float TradeData::_internal_price() const {
  return price_;
}
inline float TradeData::price() const {
  // @@protoc_insertion_point(field_get:pb.TradeData.price)
  return _internal_price();
}
inline void TradeData::_internal_set_price(float value) {
  
  price_ = value;
}
inline void TradeData::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:pb.TradeData.price)
}

// .pb.TradeData.Currency currency = 4;
inline void TradeData::clear_currency() {
  currency_ = 0;
}
inline ::pb::TradeData_Currency TradeData::_internal_currency() const {
  return static_cast< ::pb::TradeData_Currency >(currency_);
}
inline ::pb::TradeData_Currency TradeData::currency() const {
  // @@protoc_insertion_point(field_get:pb.TradeData.currency)
  return _internal_currency();
}
inline void TradeData::_internal_set_currency(::pb::TradeData_Currency value) {
  
  currency_ = value;
}
inline void TradeData::set_currency(::pb::TradeData_Currency value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:pb.TradeData.currency)
}

// int32 quantity = 5;
inline void TradeData::clear_quantity() {
  quantity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeData::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeData::quantity() const {
  // @@protoc_insertion_point(field_get:pb.TradeData.quantity)
  return _internal_quantity();
}
inline void TradeData::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  quantity_ = value;
}
inline void TradeData::set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:pb.TradeData.quantity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::TradeData_Currency> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::TradeData_Currency>() {
  return ::pb::TradeData_Currency_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tradeData_2eproto
