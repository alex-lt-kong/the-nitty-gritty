Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: floating_division_potential_aliasing(float *, float *, size_t, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (floating_division_potential_aliasing(float *, float *, size_t, double *)) [1] func.c(4,95)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at func.c(12,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at func.c(12,3)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ func.c(13,6) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at func.c(12,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at func.c(12,3)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at func.c(12,3)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

func.c(4,95):remark #34051: REGISTER ALLOCATION : [floating_division_potential_aliasing] func.c:4

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbp rsi rdi r8-r11 zmm0-zmm11]
        
    Routine temporaries
        Total         :     117
            Global    :      29
            Local     :      88
        Regenerable   :       1
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
