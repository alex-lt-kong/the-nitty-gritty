# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _mylibs
else:
    import _mylibs

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _mylibs.SWIG_PyInstanceMethod_New
_swig_new_static_method = _mylibs.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class Transcript(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Scores = property(_mylibs.Transcript_Scores_get, _mylibs.Transcript_Scores_set)
    __getitem__ = _swig_new_instance_method(_mylibs.Transcript___getitem__)

    def __init__(self):
        _mylibs.Transcript_swiginit(self, _mylibs.new_Transcript())
    __swig_destroy__ = _mylibs.delete_Transcript

# Register Transcript in _mylibs:
_mylibs.Transcript_swigregister(Transcript)
class MyClass(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Id = property(_mylibs.MyClass_Id_get, _mylibs.MyClass_Id_set)
    Name = property(_mylibs.MyClass_Name_get, _mylibs.MyClass_Name_set)
    PhoneNumber = property(_mylibs.MyClass_PhoneNumber_get, _mylibs.MyClass_PhoneNumber_set)
    Scores = property(_mylibs.MyClass_Scores_get, _mylibs.MyClass_Scores_set)

    def __init__(self):
        _mylibs.MyClass_swiginit(self, _mylibs.new_MyClass())
    __swig_destroy__ = _mylibs.delete_MyClass
    Print = _swig_new_instance_method(_mylibs.MyClass_Print)
    PrintOther = _swig_new_instance_method(_mylibs.MyClass_PrintOther)

# Register MyClass in _mylibs:
_mylibs.MyClass_swigregister(MyClass)
class Student(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    score1 = property(_mylibs.Student_score1_get, _mylibs.Student_score1_set)
    score2 = property(_mylibs.Student_score2_get, _mylibs.Student_score2_set)
    score3 = property(_mylibs.Student_score3_get, _mylibs.Student_score3_set)

    def __init__(self):
        _mylibs.Student_swiginit(self, _mylibs.new_Student())
    __swig_destroy__ = _mylibs.delete_Student

# Register Student in _mylibs:
_mylibs.Student_swigregister(Student)
class MyIf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    count = property(_mylibs.MyIf_count_get, _mylibs.MyIf_count_set)
    stu = property(_mylibs.MyIf_stu_get, _mylibs.MyIf_stu_set)

    def __init__(self):
        if self.__class__ == MyIf:
            _self = None
        else:
            _self = self
        _mylibs.MyIf_swiginit(self, _mylibs.new_MyIf(_self, ))
    myfunc = _swig_new_instance_method(_mylibs.MyIf_myfunc)
    __swig_destroy__ = _mylibs.delete_MyIf
    start = _swig_new_instance_method(_mylibs.MyIf_start)
    def __disown__(self):
        self.this.disown()
        _mylibs.disown_MyIf(self)
        return weakref.proxy(self)

# Register MyIf in _mylibs:
_mylibs.MyIf_swigregister(MyIf)

