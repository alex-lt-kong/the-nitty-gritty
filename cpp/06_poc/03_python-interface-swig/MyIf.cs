//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class MyIf : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MyIf(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MyIf obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(MyIf obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~MyIf() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          mylibsPINVOKE.delete_MyIf(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint count {
    set {
      mylibsPINVOKE.MyIf_count_set(swigCPtr, value);
    } 
    get {
      uint ret = mylibsPINVOKE.MyIf_count_get(swigCPtr);
      return ret;
    } 
  }

  public Student stu {
    set {
      mylibsPINVOKE.MyIf_stu_set(swigCPtr, Student.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = mylibsPINVOKE.MyIf_stu_get(swigCPtr);
      Student ret = (cPtr == global::System.IntPtr.Zero) ? null : new Student(cPtr, false);
      return ret;
    } 
  }

  public MyIf() : this(mylibsPINVOKE.new_MyIf(), true) {
    SwigDirectorConnect();
  }

  public virtual void myfunc(Student arg0) {
    mylibsPINVOKE.MyIf_myfunc(swigCPtr, Student.getCPtr(arg0));
    if (mylibsPINVOKE.SWIGPendingException.Pending) throw mylibsPINVOKE.SWIGPendingException.Retrieve();
  }

  public int testFUnc() {
    int ret = mylibsPINVOKE.MyIf_testFUnc(swigCPtr);
    return ret;
  }

  public void start(uint iter) {
    mylibsPINVOKE.MyIf_start(swigCPtr, iter);
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("myfunc", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateMyIf_0(SwigDirectorMethodmyfunc);
    mylibsPINVOKE.MyIf_director_connect(swigCPtr, swigDelegate0);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo[] methodInfos = this.GetType().GetMethods(
        global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance);
    foreach (global::System.Reflection.MethodInfo methodInfo in methodInfos) {
      if (methodInfo.DeclaringType == null)
        continue;

      if (methodInfo.Name != methodName)
        continue;

      var parameters = methodInfo.GetParameters();
      if (parameters.Length != methodTypes.Length)
        continue;

      bool parametersMatch = true;
      for (var i = 0; i < parameters.Length; i++) {
        if (parameters[i].ParameterType != methodTypes[i]) {
          parametersMatch = false;
          break;
        }
      }

      if (!parametersMatch)
        continue;

      if (methodInfo.IsVirtual && (methodInfo.DeclaringType.IsSubclassOf(typeof(MyIf))) &&
        methodInfo.DeclaringType != methodInfo.GetBaseDefinition().DeclaringType) {
        return true;
      }
    }

    return false;
  }

  private void SwigDirectorMethodmyfunc(global::System.IntPtr arg0) {
    myfunc(new Student(arg0, true));
  }

  public delegate void SwigDelegateMyIf_0(global::System.IntPtr arg0);

  private SwigDelegateMyIf_0 swigDelegate0;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(Student) };
}
